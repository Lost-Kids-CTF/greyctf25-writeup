from Crypto.Util.number import long_to_bytes

# Constants
e = 3
N = 140435453730354645791411355194663476189925572822633969369789174462118371271596760636019139860253031574578527741964265651042308868891445943157297334529542262978581980510561588647737777257782808189452048059686839526183098369088517967034275028064545393619471943508597642789736561111876518966375338087811587061841
C = 49352042282005059128581014505726171900605591297613623345867441621895112187636996726631442703018174634451487011943207283077132380966236199654225908444639768747819586037837300977718224328851698492514071424157020166404634418443047079321427635477610768472595631700807761956649004094995037741924081602353532946351

# Read counts from output.txt
with open("dist/output.txt", "r") as f:
    lines = f.readlines()

tung_count = sum(1 for line in lines if "Tung!" in line)
sahur_count = sum(1 for line in lines if "Sahur!" in line)

# Recover the original C based on counts
C = (C + N * sahur_count) // (2 ** tung_count)

# Compute integer cube root using Sage
m = Integer(C).nth_root(e)

# Convert to bytes
flag = long_to_bytes(m)
print("Flag:", flag.decode())
